plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

version '1.0-SNAPSHOT'
sourceCompatibility = 1.9
mainClassName = "com.gypsyengineer.tlsbunny.Main"

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jacoco {
    toolVersion = '0.8.2'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
    }

    test {
        java {
            srcDirs 'src/test/java'
        }
    }

    interoperability {
        java.srcDir file('src/test/interoperability')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// test tasks

// run the interoperability tests against third-party TLS implementations
// make sure that the servers are running before running the task
task interoperability(type: Test) {
    description = 'Runs the interoperability tests'
    testClassesDirs = sourceSets.interoperability.output.classesDirs
    classpath += sourceSets.interoperability.runtimeClasspath
    classpath += sourceSets.main.runtimeClasspath
}

// tasks for running tests for GnuTLS

task buildGnutlsDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/gnutls/Dockerfile',
            '--tag',  'gnutls/server/tls13',
            '.'
}

task runGnutlsServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'gnutls_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'gnutls_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'gnutls_server_tls13',
                    '-d',
                    '-p', '50101:50101',
                    'gnutls/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killGnutlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'gnutls_server_tls13'
}

task removeGnutlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'gnutls_server_tls13'
}

task gnutlsClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=50101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.gnutls.client.HttpsClient"
}

task gnutlsFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '50101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.gnutls.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runGnutlsFuzzing {
    dependsOn 'runGnutlsServer'
    dependsOn 'gnutlsFuzzyClient'

    // run fuzzing
    tasks.findByName('gnutlsFuzzyClient').mustRunAfter('runGnutlsServer')
}

// tasks for running tests for OpenSSL

task buildOpensslDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/openssl/Dockerfile',
            '--tag',  'openssl/server/tls13',
            '.'
}

task runOpensslServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'openssl_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'openssl_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'openssl_server_tls13',
                    '-d',
                    '-p', '10101:10101',
                    'openssl/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killOpensslDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'openssl_server_tls13'
}

task removeOpensslDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'openssl_server_tls13'
}

task opensslHttpsClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '10101'
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.HttpsClient"
}

task opensslFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '10101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.FuzzyClient"
}

task opensslClientAuth(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.ClientAuth"
}

task opensslFuzzyClientAuth(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.FuzzyClientAuth"
}

// run a local server in a docker container and start fuzzing
task runOpensslFuzzing {
    dependsOn 'runOpensslServer'
    dependsOn 'opensslFuzzyClient'

    // run fuzzing
    tasks.findByName('opensslFuzzyClient').mustRunAfter('runOpensslServer')
}

// tasks for running tests for picotls

task buildPicotlsDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/picotls/Dockerfile',
            '--tag',  'picotls/server/tls13',
            '.'
}

task runPicotlsServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'picotls_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'picotls_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'picotls_server_tls13',
                    '-d',
                    '-p', '20101:20101',
                    'picotls/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killPicotlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'picotls_server_tls13'
}

task removePicotlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'picotls_server_tls13'
}

task picotlsClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=20101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.picotls.client.PicotlsClient"
}

task picotlsFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '20101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.picotls.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runPicotlsFuzzing {
    dependsOn 'runPicotlsServer'
    dependsOn 'picotlsFuzzyClient'

    // run fuzzing
    tasks.findByName('picotlsFuzzyClient').mustRunAfter('runPicotlsServer')
}

// tasks for running tests for h2o + picotls

task buildH2ODocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/h2o/Dockerfile',
            '--tag',  'h2o/server/tls13',
            '.'
}

task runH2OServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'h2o_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'h2o_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'h2o_server_tls13',
                    '-d',
                    '-p', '30101:30101',
                    'h2o/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killH2ODockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'h2o_server_tls13'
}

task removeH2ODockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'h2o_server_tls13'
}

task h2oClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=30101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.h2o.client.HttpsClient"
}

task h2oFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '30101'
    systemProperty 'tlsbunny.threads', '3'
    main = "com.gypsyengineer.tlsbunny.tls13.test.h2o.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runH2OFuzzing {
    dependsOn 'runH2OServer'
    dependsOn 'h2oFuzzyClient'

    // run fuzzing
    tasks.findByName('h2oFuzzyClient').mustRunAfter('runH2OServer')
}

// tasks for running tests for NSS

// builds a Docker images with NSS server
task buildNssDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/nss/Dockerfile',
            '--tag',  'nss/server/tls13',
            '.'
}

// kill an NSS server (if running), remove an old Docker container,
// and start a new one on specified port
task runNssServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'nss_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'nss_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'nss_server_tls13',
                    '-d',
                    '-p', '60101:60101',
                    'nss/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'    // in seconds
        }
    }
}

// kill a docker container with NSS server
task killNssDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'nss_server_tls13'
}

// remove a docker container with NSS server
task removeNssDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'nss_server_tls13'
}

task nssClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=60101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.nss.client.HttpsClient"
}

task nssFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '60101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.nss.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runNssFuzzing {
    dependsOn 'runNssServer'
    dependsOn 'nssFuzzyClient'

    // run fuzzing
    tasks.findByName('nssFuzzyClient').mustRunAfter('runNssServer')
}

// tasks for running tests for WolfSSL

// builds a Docker images with WolfSSL server
task buildWolfSSLDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/wolfssl/Dockerfile',
            '--tag',  'wolfssl/server/tls13',
            '.'
}

// kill an WolfSSL server (if running), remove an old Docker container,
// and start a new one on specified port
task runWolfsslServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'wolfssl_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'wolfssl_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'wolfssl_server_tls13',
                    '-d',
                    '-p', '40101:40101',
                    'wolfssl/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'    // in seconds
        }
    }
}

// kill a docker container with WolfSSL server
task killWolfSSLDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'wolfssl_server_tls13'
}

// remove a docker container with WolfSSL server
task removeWolfSSLDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'wolfssl_server_tls13'
}

task wolfsslClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=60101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.wolfssl.client.HttpsClient"
}

task wolfsslFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '40101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.wolfssl.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runWolfsslFuzzing {
    dependsOn 'runWolfsslServer'
    dependsOn 'wolfsslFuzzyClient'

    // run fuzzing
    tasks.findByName('wolfsslFuzzyClient').mustRunAfter('runWolfsslServer')
}

// build all docker images
task buildAllDocker() {
    dependsOn 'buildGnutlsDocker'
    dependsOn 'buildPicotlsDocker'
    dependsOn 'buildOpensslDocker'
    dependsOn 'buildH2ODocker'
    dependsOn 'buildNssDocker'
    dependsOn 'buildWolfSSLDocker'
}

// run all servers
task runAllServers() {
    dependsOn 'runNssServer'
    dependsOn 'runH2OServer'
    dependsOn 'runOpensslServer'
    dependsOn 'runGnutlsServer'
    dependsOn 'runPicotlsServer'
    dependsOn 'runWolfsslServer'
}

// run fuzzing for all targets
task runAllFuzzing() {
    dependsOn 'runH2OFuzzing'
    dependsOn 'runPicotlsFuzzing'
    dependsOn 'runOpensslFuzzing'
    dependsOn 'runGnutlsFuzzing'
    dependsOn 'runNssFuzzing'
    dependsOn 'runWolfsslFuzzing'
}

// check for crashes
task checkCrashes(type: Exec) {
    commandLine 'bash', 'scripts/check_logs_for_crashes.sh',
            'gnutls_server_tls13',
            'nss_server_tls13',
            'h2o_server_tls13', 
            'picotls_server_tls13',
            'openssl_server_tls13',
            'wolfssl_server_tls13'
}
