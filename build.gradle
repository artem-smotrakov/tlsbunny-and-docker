plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '2.6.2'
}

version '1.0-SNAPSHOT'
sourceCompatibility = 1.9
mainClassName = "com.gypsyengineer.tlsbunny.Main"

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jacoco {
    toolVersion = '0.8.2'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/core'
        }
    }

    vendor {
        java {
            srcDir 'src/vendor/test'
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    test {
        java {
            srcDirs 'src/test/core'
        }

        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.vendor.output
        compileClasspath += configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

test {
    if (project.hasProperty('tlsbunny.test.exclude')) {
        exclude project.property('tlsbunny.test.exclude')
    }

    if (project.hasProperty('tlsbunny.test.include')) {
        include project.property('tlsbunny.test.include')
    }

    systemProperty "tlsbunny.output.only.achtung", System.getProperty("tlsbunny.output.only.achtung", "false")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// build all docker images
task buildAllDocker() {
    dependsOn 'buildGnutlsDocker'
    dependsOn 'buildPicotlsDocker'
    dependsOn 'buildOpensslDocker'
    dependsOn 'buildH2ODocker'
    dependsOn 'buildNssDocker'
    dependsOn 'buildWolfSSLDocker'
}

// run all servers
task runAllServers() {
    dependsOn 'runNssServer'
    dependsOn 'runH2OServer'
    dependsOn 'runOpensslServer'
    dependsOn 'runGnutlsServer'
    dependsOn 'runPicotlsServer'
    dependsOn 'runWolfsslServer'
}

// check for crashes
task checkCrashes(type: Exec) {
    commandLine 'bash', 'scripts/check_logs_for_crashes.sh',
            'gnutls_server_tls13',
            'nss_server_tls13',
            'h2o_server_tls13',
            'picotls_server_tls13',
            'openssl_server_tls13',
            'wolfssl_server_tls13'
}

// tasks for running tests for GnuTLS

task buildGnutlsDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/gnutls/Dockerfile',
            '--tag',  'gnutls/server/tls13',
            '.'
}

task runGnutlsServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'gnutls_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'gnutls_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'gnutls_server_tls13',
                    '-d',
                    '-p', '50101:50101',
                    'gnutls/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

// tasks for running tests for OpenSSL

task buildOpensslDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/vendor/docker/openssl/Dockerfile',
            '--tag',  'openssl/tls13',
            '.'
}

task runOpensslServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'openssl_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'openssl_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'openssl_server_tls13',
                    '-d',
                    '-p', '10101:10101',
                    'openssl/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task runOpensslTests(type: Test) {
    description = 'Runs tests for OpenSSL'
    group = 'openssl'
    testClassesDirs = sourceSets.vendor.output.classesDirs
    classpath = sourceSets.vendor.runtimeClasspath
    testLogging.showStandardStreams = true
    ignoreFailures = true
    outputs.upToDateWhen { false }

    include 'com/gypsyengineer/tlsbunny/vendor/test/tls13/openssl/**/*Tests*'
    exclude 'com/gypsyengineer/tlsbunny/vendor/test/tls13/openssl/**/*Fuzzing*'
}

task runOpensslFuzzing(type: Test) {
    description = 'Runs fuzzing for OpenSSL'
    group = 'openssl'
    testClassesDirs = sourceSets.vendor.output.classesDirs
    classpath = sourceSets.vendor.runtimeClasspath
    testLogging.showStandardStreams = true
    ignoreFailures = true
    outputs.upToDateWhen { false }

    include 'com/gypsyengineer/tlsbunny/vendor/test/tls13/openssl/**/*Fuzzing*'
}

// tasks for running tests for picotls

task buildPicotlsDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/picotls/Dockerfile',
            '--tag',  'picotls/server/tls13',
            '.'
}

task runPicotlsServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'picotls_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'picotls_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'picotls_server_tls13',
                    '-d',
                    '-p', '20101:20101',
                    'picotls/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

// tasks for running tests for h2o + picotls

task buildH2ODocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/h2o/Dockerfile',
            '--tag',  'h2o/server/tls13',
            '.'
}

task runH2OServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'h2o_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'h2o_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'h2o_server_tls13',
                    '-d',
                    '-p', '30101:30101',
                    'h2o/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

// tasks for running tests for NSS

// builds a Docker images with NSS server
task buildNssDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/nss/Dockerfile',
            '--tag',  'nss/server/tls13',
            '.'
}

// kill an NSS server (if running), remove an old Docker container,
// and start a new one on specified port
task runNssServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'nss_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'nss_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'nss_server_tls13',
                    '-d',
                    '-p', '60101:60101',
                    'nss/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'    // in seconds
        }
    }
}

// tasks for running tests for WolfSSL

// builds a Docker images with WolfSSL server
task buildWolfSSLDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--no-cache',
            '--file', 'src/main/docker/wolfssl/Dockerfile',
            '--tag',  'wolfssl/server/tls13',
            '.'
}

// kill an WolfSSL server (if running), remove an old Docker container,
// and start a new one on specified port
task runWolfsslServer {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'wolfssl_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'wolfssl_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'wolfssl_server_tls13',
                    '-d',
                    '-p', '40101:40101',
                    'wolfssl/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'    // in seconds
        }
    }
}
