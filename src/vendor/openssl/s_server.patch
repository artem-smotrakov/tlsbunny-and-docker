diff --git a/apps/s_server.c b/apps/s_server.c
index fbbfd6c..ae72aed 100644
--- a/apps/s_server.c
+++ b/apps/s_server.c
@@ -60,6 +60,17 @@ typedef unsigned int u_int;
 #endif
 #include "internal/sockets.h"
 
+// forward declaration of __gcov_flush()
+void __gcov_flush();
+
+// signal handler definition which flushes coverage data
+void signal_handler(int signum)
+{
+    fprintf(stderr, "received signal %d, dump code coverage data\n", signum);
+    __gcov_flush();
+    exit(1);
+}
+
 static int not_resumable_sess_cb(SSL *s, int is_forward_secure);
 static int sv_body(int s, int stype, int prot, unsigned char *context);
 static int www_body(int s, int stype, int prot, unsigned char *context);
@@ -1052,6 +1063,12 @@ int s_server_main(int argc, char *argv[])
     int sctp_label_bug = 0;
 #endif
 
+    fprintf(stdout, "set a signal handler\n");
+    if (signal(SIGINT, signal_handler) == SIG_ERR) {
+        fprintf(stderr, "could not set a handler for signal\n");
+        exit(1);
+    }
+
     /* Init of few remaining global variables */
     local_argc = argc;
     local_argv = argv;
diff --git a/apps/s_socket.c b/apps/s_socket.c
index 7dd95e9..d8fc741 100644
--- a/apps/s_socket.c
+++ b/apps/s_socket.c
@@ -217,6 +217,8 @@ int do_server(int *accept_sock, const char *host, const char *port,
     int sock_options = BIO_SOCK_REUSEADDR;
     int ret = 0;
 
+    fprintf(stdout, "debug: do_server(): start\n");
+
     if (BIO_sock_init() != 1)
         return 0;
 
@@ -333,6 +335,8 @@ int do_server(int *accept_sock, const char *host, const char *port,
                 ERR_print_errors(bio_err);
                 goto end;
             }
+            (void)BIO_printf(bio_s_out, "tlsbunny: accept\n");
+            (void)BIO_flush(bio_s_out);
             do {
                 sock = BIO_accept_ex(asock, ourpeer, 0);
             } while (sock < 0 && BIO_sock_should_retry(sock));
@@ -374,6 +378,8 @@ int do_server(int *accept_sock, const char *host, const char *port,
             i = (*cb)(asock, type, protocol, context);
         }
 
+        BIO_printf(bio_s_out, "tlsbunny: done\n");
+        (void)BIO_flush(bio_s_out);
         if (naccept != -1)
             naccept--;
         if (i < 0 || naccept == 0) {
